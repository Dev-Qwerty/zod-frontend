[{"F:\\projects\\zod-frontend\\zod\\src\\index.js":"1","F:\\projects\\zod-frontend\\zod\\src\\reportWebVitals.js":"2","F:\\projects\\zod-frontend\\zod\\src\\App.js":"3","F:\\projects\\zod-frontend\\zod\\src\\components\\SignUp\\SignUp.js":"4","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\Profile\\Profile-MyProfile.js":"5","F:\\projects\\zod-frontend\\zod\\src\\components\\ConfirmEmail\\ConfirmEmail.js":"6","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\CreateProject\\CreateProject.js":"7","F:\\projects\\zod-frontend\\zod\\src\\components\\Login\\Login.js":"8","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\PendingInvites\\PendingInvites-MyProfile.js":"9","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\Base.js":"10","F:\\projects\\zod-frontend\\zod\\src\\components\\Home\\Home.js":"11","F:\\projects\\zod-frontend\\zod\\src\\components\\Chat\\CreateChannel.js":"12","F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\Board.js":"13","F:\\projects\\zod-frontend\\zod\\src\\components\\ResetPassword\\ResetPassword.js":"14","F:\\projects\\zod-frontend\\zod\\src\\components\\Chat\\ChatHome.js":"15","F:\\projects\\zod-frontend\\zod\\src\\components\\ProjectDashboard\\ProjectD.js":"16","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\Profile\\CmpProfile.js":"17","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\PendingInvites\\CmpPending.js":"18","F:\\projects\\zod-frontend\\zod\\src\\components\\Chat\\DynamicChatDisplay.js":"19","F:\\projects\\zod-frontend\\zod\\src\\functions\\refreshToken.js":"20","F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\CreatePersonalBoard.js":"21","F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\CreatePublicBoard.js":"22","F:\\projects\\zod-frontend\\zod\\src\\components\\Loader\\Loader.js":"23","F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\BMain.js":"24","F:\\projects\\zod-frontend\\zod\\src\\components\\VideoCall\\ScheduleVC.js":"25","F:\\projects\\zod-frontend\\zod\\src\\components\\Loader\\CirclesLoader.js":"26","F:\\projects\\zod-frontend\\zod\\src\\components\\Calendar\\Cal.js":"27"},{"size":615,"mtime":1622191683035,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1622191683035,"results":"30","hashOfConfig":"29"},{"size":3489,"mtime":1623787172722,"results":"31","hashOfConfig":"29"},{"size":4862,"mtime":1622472457979,"results":"32","hashOfConfig":"29"},{"size":2982,"mtime":1622485540091,"results":"33","hashOfConfig":"29"},{"size":2331,"mtime":1622191683025,"results":"34","hashOfConfig":"29"},{"size":7789,"mtime":1623767931566,"results":"35","hashOfConfig":"29"},{"size":3962,"mtime":1622191683025,"results":"36","hashOfConfig":"29"},{"size":3002,"mtime":1622485856514,"results":"37","hashOfConfig":"29"},{"size":6523,"mtime":1623921882896,"results":"38","hashOfConfig":"29"},{"size":5665,"mtime":1622191683025,"results":"39","hashOfConfig":"29"},{"size":6506,"mtime":1623767931605,"results":"40","hashOfConfig":"29"},{"size":13673,"mtime":1623929416654,"results":"41","hashOfConfig":"29"},{"size":1391,"mtime":1622191683025,"results":"42","hashOfConfig":"29"},{"size":6999,"mtime":1623921882961,"results":"43","hashOfConfig":"29"},{"size":11917,"mtime":1623931221136,"results":"44","hashOfConfig":"29"},{"size":6239,"mtime":1622484575850,"results":"45","hashOfConfig":"29"},{"size":6855,"mtime":1623767931569,"results":"46","hashOfConfig":"29"},{"size":17304,"mtime":1623921882995,"results":"47","hashOfConfig":"29"},{"size":573,"mtime":1622191683035,"results":"48","hashOfConfig":"29"},{"size":8982,"mtime":1623921882925,"results":"49","hashOfConfig":"29"},{"size":12606,"mtime":1623921882936,"results":"50","hashOfConfig":"29"},{"size":461,"mtime":1622191683025,"results":"51","hashOfConfig":"29"},{"size":35607,"mtime":1623929413637,"results":"52","hashOfConfig":"29"},{"size":9037,"mtime":1623930200393,"results":"53","hashOfConfig":"29"},{"size":475,"mtime":1623767931660,"results":"54","hashOfConfig":"29"},{"size":6149,"mtime":1623913577998,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"9zxbb8",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\projects\\zod-frontend\\zod\\src\\index.js",[],["125","126"],"F:\\projects\\zod-frontend\\zod\\src\\reportWebVitals.js",[],"F:\\projects\\zod-frontend\\zod\\src\\App.js",[],"F:\\projects\\zod-frontend\\zod\\src\\components\\SignUp\\SignUp.js",["127"],"import React, { useEffect } from 'react';\r\nimport './SignUp.css';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap-button-loader';\r\nimport {toast} from 'react-toastify'; \r\nimport 'react-toastify/dist/ReactToastify.css'; \r\n\r\ntoast.configure()\r\n\r\nconst { useState } = React;\r\n\r\nfunction SignUpPage() {    \r\n    const [name, setNameValue] = useState('');\r\n    const [email, setemailValue] = useState('');\r\n    const [password, setPasswordValue] = useState('');\r\n    const [cpassword, setCPasswordValue] = useState('');\r\n    const [loading, setLoader] = useState(false);\r\n    const [btnText, setBtnText] = useState('Sign Up');\r\n\r\n    const handleNameChange = (e) => setNameValue(e.target.value);\r\n    const handleEmailChange = (e) => setemailValue(e.target.value);\r\n    const handlepasswordChange = (e) => setPasswordValue(e.target.value);\r\n    const handleCPasswordChange = (e) => setCPasswordValue(e.target.value);\r\n    return (\r\n        <div className=\"SignUpPage\">\r\n            <span className=\"zod-title\">zode</span>\r\n            <p className=\"zod-tagline\">Collaboration platform for software development teams</p>\r\n                <div className=\"card zod-signupcard\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Create a new account</h5>\r\n                        <div className=\"zod-signup-inputs\">\r\n                            <input type=\"text\" className=\"form-control input-sm zod-name-grp\" placeholder=\"Full Name\" value={name} onChange={handleNameChange}/>       \r\n                            <input type=\"text\" placeholder=\"Email\" className=\"zod-signup-grp form-control\" value={email} onChange={handleEmailChange}></input>\r\n                            <input type=\"password\" placeholder=\"Password\" className=\"zod-signup-grp form-control\" value={password} onChange={handlepasswordChange}></input>\r\n                            <input type=\"password\" placeholder=\"Confirm Password\" className=\"zod-signup-grp form-control\" value={cpassword} onChange={handleCPasswordChange}></input>\r\n                            <Button variant=\"success\" loading={loading} className=\"zod-signup-btn zod-signup-grp\" onClick={SignUpRequest.bind(this, name, email, password, cpassword, setLoader, setBtnText)}>{btnText}</Button>\r\n                            <hr/>\r\n                            <button type=\"submit\" className=\"zod-google-btn-1\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"Google Logo\"></img>Sign up with Google</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <span className=\"zod-signuptxt\">Already have an account? <Link to=\"/login\" style={{ textDecoration: 'none', color: '#000', fontWeight: 'bold' }}>Login</Link></span>\r\n            <footer className=\"zod-footer\">\r\n                <ul>\r\n                    <li>Privacy & Terms</li>\r\n                    <li>Contact Us</li>\r\n                </ul>\r\n            </footer>\r\n        </div>\r\n        );\r\n}\r\n\r\nasync function SignUpRequest(name, email, password, cpassword, setLoader, setBtnText) {\r\n    setBtnText('Signing Up...');\r\n    setLoader(true);\r\n    if(name === '' || email === '' || password === '') {\r\n        toast.warning('Please enter all fields!', {position: toast.POSITION.BOTTOM_LEFT});\r\n        setBtnText('Sign Up');\r\n        setLoader(false);\r\n        return;\r\n    }\r\n    else if(password !== cpassword) {\r\n        toast.error('Passwords not matching!', {position: toast.POSITION.BOTTOM_LEFT});\r\n        setBtnText('Sign Up');\r\n        setLoader(false);\r\n        return;\r\n    }\r\n    else {\r\n    const reqBody = {\r\n        \"name\": name,\r\n        \"email\": email, \r\n        \"password\": password\r\n    }\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin' : '*'\r\n        }\r\n    }\r\n    axios.post('https://userservice-zode.herokuapp.com/api/user/signup', reqBody, config).then((response) => {\r\n        if(response.status === 201) {\r\n            localStorage.setItem(\"email\", email);\r\n            window.location.href = window.location.protocol + '//' + window.location.host + '/confirmEmail';\r\n        }\r\n    }).finally(()=> {\r\n        setLoader(false);\r\n        setBtnText('Sign Up');\r\n    }).catch(error => {\r\n        if(error.response.data.error === 'user with the provided email already exists') {\r\n            toast.warning(\"Account with the given email already exists!\", {position: toast.POSITION.BOTTOM_LEFT});\r\n            window.location.href = window.location.protocol + '//' + window.location.host + '/login';\r\n        }\r\n        else {\r\n            toast.error(error.response.data.error, {position: toast.POSITION.BOTTOM_LEFT});\r\n        }\r\n    })\r\n    }\r\n}\r\n\r\nexport default SignUpPage;","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\Profile\\Profile-MyProfile.js",["128"],"import './Profile-MyProfile.css';\r\nimport CmpProfile from './CmpProfile'\r\nimport { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport firebase from 'firebase';\r\nimport refreshToken from '../../../functions/refreshToken';\r\n\r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\nexport default class MyProfileP extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            avatar: ''\r\n        }\r\n    } \r\n\r\n    componentDidMount() {\r\n\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            localStorage.setItem('photoURL', user.photoURL);\r\n\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n\r\n        refreshToken();\r\n        \r\n        this.setState({\r\n            avatar : localStorage.getItem('photoURL')\r\n        });         \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"MyProfile\">   \r\n    \r\n                <div className=\"mp-top-nav\">\r\n    \r\n                    <div className=\"mp-left-wrapper\">\r\n                        <p className=\"bd-title\">zode</p>\r\n                    </div>\r\n    \r\n                    <div className=\"mp-mid-wrapper\">\r\n                        <p>BASE&nbsp;&nbsp;DASHBOARD</p>\r\n                    </div>\r\n    \r\n                    <div className=\"mp-right-wrapper\">\r\n    \r\n                        <div className=\"mp-profile-icon-wrapper\">\r\n    \r\n                            <div>\r\n                                <img className=\"Mp-icon\" src = { this.state.avatar }/>\r\n                            </div>\r\n    \r\n                            <div className=\"mp-dropdown-content\">\r\n                                <Link to=\"/basedashboard/home\" style={{ textDecoration: 'none' }}><p>Home</p></Link>\r\n                                <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>        \r\n        \r\n                <div className=\"mp-body\">\r\n                    <div className=\"mpb-col1\">\r\n                        <div className=\"mpb-col1-items\">\r\n                            <div className=\"mpb-col1-item1\">\r\n                                <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p className=\"p-label\">Profile</p></Link>\r\n                            </div>\r\n                            <div className=\"mpb-col1-item2\">\r\n                                <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p className=\"p-label\">Pending Invites</p></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mpb-col2\">\r\n                        <CmpProfile />\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );        \r\n    }\r\n}\r\n","F:\\projects\\zod-frontend\\zod\\src\\components\\ConfirmEmail\\ConfirmEmail.js",["129"],"import './ConfirmEmail.css';\r\nimport sendMsgSVG from '../../assets/send-message.svg';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ConfirmEmail() {\r\n    const [seconds, setSeconds] = React.useState(30);\r\n    let [isDisabled, setDisabled] = React.useState(false);\r\n    var btn = document.getElementById('resend-btn');\r\n    React.useEffect(() => {\r\n        if (seconds > 0) {\r\n            setDisabled(true);\r\n            setTimeout(() => setSeconds(seconds - 1), 1000);\r\n        } else {\r\n            setDisabled(false);  \r\n            setSeconds(0);\r\n        }\r\n\r\n        const cleanup = () => {\r\n            localStorage.removeItem(\"email\");\r\n        }\r\n        \r\n        window.addEventListener('beforeunload', cleanup);\r\n        \r\n    });\r\n\r\n    async function handleBtnClicked() {\r\n        const reqBody = {\r\n            \"email\": localStorage.getItem(\"email\"), \r\n        }\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }\r\n        axios.post('https://userservice-zode.herokuapp.com/api/user/resendverificationemail', reqBody, config).then((response) => {\r\n            if(response.status === 200) {\r\n                alert(\"Verification Email sent to your mail. Please check.\");\r\n            }\r\n        })\r\n        \r\n        btn.setAttribute(\"disabled\",\"\");\r\n        setSeconds(30);\r\n        setTimeout(()=> {\r\n            document.getElementById('resend-btn').removeAttribute('disabled');\r\n        }, 30000);\r\n    }\r\n    return(\r\n        <div className=\"ConfirmEmailPage\">\r\n            <span className=\"zod-ctitle\">zode</span>\r\n            <div className=\"sendMsg-svg\">\r\n                <img src={sendMsgSVG} alt=\"send email svg\" className=\"send-svg\"></img>\r\n            </div>\r\n            <div className=\"zod-cheading\">\r\n                <h1>You're almost there!</h1>\r\n                <p>We have sent a verificaton email to {localStorage.getItem(\"email\")}.<br></br>Please click the link to verify your account.</p>\r\n            </div>\r\n            <div className=\"zod-mail-timer\">\r\n                <p>Didn't receive the mail? <button id=\"resend-btn\" disabled={isDisabled} onClick={handleBtnClicked.bind()}>Resend</button> in {seconds} seconds.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmEmail;","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\CreateProject\\CreateProject.js",["130","131"],"import './CreateProject.css';\r\nimport React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport firebase from 'firebase';\r\nimport refreshToken from '../../../functions/refreshToken';\r\nimport Button from 'react-bootstrap-button-loader'; \r\n\r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\n\r\nfunction CreateProject() {\r\n\r\n    const [pname, setPnameValue] = useState('');\r\n    const [deadline, setDeadlineValue] = useState('');\r\n    const [avatar, setAvatar] = useState('');\r\n    const [memberList, setMemberList] = useState([{ email: \"\", userRole: \"\" }]);\r\n    const [loading, setLoader] = useState(false);\r\n    const [btnText, setBtnText] = useState('Create');\r\n\r\n\r\n    // handle input change - pname, deadline\r\n    const handlePnameChange = (e) => setPnameValue(e.target.value);\r\n    const handleDeadlineChange = (e) => setDeadlineValue(e.target.value);\r\n   \r\n    // handle input change - memberList\r\n    const handleMemberInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const list = [...memberList];\r\n        list[index][name] = value;\r\n        setMemberList(list);\r\n    };    \r\n\r\n    // handle click event - Remove button\r\n    const handleRemoveBtn = index => {\r\n        const list = [...memberList];\r\n        list.splice(index, 1);\r\n        setMemberList(list);\r\n    };\r\n    \r\n    // Handle click event - Add button\r\n    const handleAddBtn = () => {\r\n        setMemberList([...memberList, { email: \"\", userRole: \"\" }]);\r\n    }; \r\n      \r\n      \r\n    useEffect(() => {\r\n \r\n        // update token\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            localStorage.setItem('photoURL', user.photoURL);\r\n\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n\r\n        refreshToken();\r\n        \r\n        setAvatar(localStorage.getItem('photoURL'));\r\n    })   \r\n\r\n    return (\r\n        <div className=\"createPro\">   \r\n\r\n            <div className=\"cp-top-nav\">\r\n\r\n                <div className=\"cp-left-wrapper\">\r\n                    <p className=\"cp-title\">zode</p>\r\n                </div>\r\n\r\n                <div className=\"cp-mid-wrapper\">\r\n                    <p>BASE&nbsp;&nbsp;DASHBOARD</p>\r\n                </div>\r\n\r\n                <div className=\"cp-right-wrapper\">\r\n\r\n                    <div className=\"cp-profile-icon-wrapper\">\r\n\r\n                        <div>\r\n                            <img className=\"cp-icon\" src = { avatar }/>\r\n                        </div>\r\n\r\n                        <div className=\"cp-dropdown-content\">\r\n                            <Link to=\"/basedashboard/home\" style={{ textDecoration: 'none' }}><p>Home</p></Link>\r\n                            <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p>My Profile</p></Link>\r\n                            <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p>Pending Invites</p></Link>\r\n                            <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>   \r\n\r\n            <div className=\"cp-rect-border-bottom\">\r\n                <p>Create New Project</p>\r\n            </div>\r\n\r\n            <div className=\"cp-box\">\r\n                \r\n                <div className=\"cp-box-contents\">\r\n\r\n                    <div className=\"cp-inp-wrapper\">\r\n\r\n                        <p className=\"cp-label\">Project Name</p>\r\n                        <div><input type=\"text\" placeholder=\"\" className=\"cp-pname\" onChange={handlePnameChange} value={pname}></input></div>\r\n                        <p className=\"cp-label\">Due Date</p>\r\n                        <div><input type=\"date\" placeholder=\"Deadline\" className=\"cp-deadline\" onChange={handleDeadlineChange}  value={deadline}></input></div>\r\n                        \r\n                        <div><p className=\"cp-addMembers\">Add Members</p></div>\r\n                    \r\n                        {memberList.map((x, i) => {\r\n                            \r\n                            return (\r\n                                <div className=\"cpm-box\">\r\n                                    \r\n                                    <div className=\"cpm-one-row-wrapper\">\r\n                                    <input type=\"text\" placeholder=\"Email\" className=\"cpm-email\" name=\"email\" onChange={e => handleMemberInputChange(e, i)}/>\r\n\r\n                                    <input list=\"userroles\" placeholder=\"Role\" className=\"cpm-role\" name=\"userRole\" onChange={e => handleMemberInputChange(e, i)}/>\r\n                                    <datalist id=\"userroles\">\r\n                                        <option value=\"Owner\"/>\r\n                                        <option value=\"Member\"/>\r\n                                    </datalist>\r\n\r\n                                    <span className=\"cpm-btn-box\">\r\n                                        {memberList.length !== 1 && <button onClick={() => handleRemoveBtn(i)} className=\"cpm-remove-btn\">Remove</button>}\r\n                                        {memberList.length - 1 === i && <button onClick={handleAddBtn} className=\"cpm-add-btn\">New</button>}\r\n                                    </span>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            );\r\n                        })}                \r\n                        <Button variant=\"success\" loading={loading} className=\"cp-submit\" onClick={createProjectFn.bind(this, pname, deadline, memberList, setBtnText, setLoader)}>{btnText}</Button>\r\n                        <ToastContainer />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nasync function createProjectFn(pname, deadline, memberList, setBtnText, setLoader) {\r\n    setBtnText('Creating...');\r\n    setLoader(true);\r\n    const token = localStorage.getItem('token')\r\n    \r\n    const reqBody = {\r\n        \"projectName\": pname,\r\n        \"deadline\": deadline,\r\n        \"pendingInvites\": memberList\r\n    }\r\n    \r\n    const config = {\r\n        headers: {\r\n            'Authorization': token,\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin' : '*',\r\n        }\r\n    }\r\n\r\n    //toast(\"Project Createed :)\");\r\n    refreshToken();\r\n    axios.post('https://projectservice-zode.herokuapp.com/api/projects/createproject', reqBody, config)\r\n    .then((res) => {\r\n\r\n        if(res.status === 201) {\r\n\r\n            toast.info('Project Created!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n            setTimeout(() => {\r\n                setBtnText('Created!');\r\n                setLoader(false);\r\n                window.location.href = window.location.protocol + '//' + window.location.host + '/basedashboard/home';\r\n              }, 2500);\r\n\r\n        } else {\r\n            setBtnText('Create');\r\n            setLoader(false);\r\n            toast.error('Some Error Occured!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            });\r\n        }\r\n    })   \r\n}\r\n\r\nexport default CreateProject;","F:\\projects\\zod-frontend\\zod\\src\\components\\Login\\Login.js",["132"],"import './Login.css';\r\nimport {Link} from 'react-router-dom';\r\nimport firebase from 'firebase';\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap-button-loader';\r\nimport {toast} from 'react-toastify'; \r\n\r\ntoast.configure()\r\n\r\nconst { useState } = React;\r\nfunction LoginPage() {\r\n    const [email, setemailValue] = useState('');\r\n    const [password, setPasswordValue] = useState('');\r\n    const [loading, setLoader] = useState(false);\r\n    const [btnText, setBtnText] = useState('Login');\r\n    \r\n    const handleEmailChange = (e) => setemailValue(e.target.value);\r\n    const handlepasswordChange = (e) => setPasswordValue(e.target.value);\r\n    return (\r\n        <div className=\"LoginPage\">\r\n            <span className=\"zod-title\">zode</span>\r\n            <p className=\"zod-tagline\">Collaboration platform for software development teams</p>\r\n                <div className=\"card zod-logincard\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Login to your account</h5>\r\n                        <div className=\"zod-login-inputs\">\r\n                            <input type=\"text\" placeholder=\"Enter email\" className=\"zod-login-grp form-control\" value={email} onChange={handleEmailChange}></input>\r\n                            <input type=\"password\" placeholder=\"Enter password\" className=\"zod-login-grp form-control\" value={password} onChange={handlepasswordChange}></input>\r\n                            <Button variant=\"success\" loading={loading} className=\"zod-login-btn zod-login-grp\" onClick={LoginRequest.bind(this, email, password, setLoader, setBtnText)}>{btnText}</Button>\r\n                            <hr/>\r\n                            <button type=\"submit\" className=\"zod-google-btn\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"Google Logo\"></img>Login with Google</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            <span className=\"zod-logintxt\">Don't have an account? <Link to=\"/signup\" style={{ textDecoration: 'none', color: '#000', fontWeight: 'bold' }}>Sign Up</Link></span>\r\n            <footer>\r\n                <ul>\r\n                    <li>Privacy & Terms</li>\r\n                    <li>Contact Us</li>\r\n                </ul>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LoginRequest(email, password, setLoader, setBtnText) {\r\n    setLoader(true);\r\n    setBtnText('Logging in...');\r\n    firebase.auth().signInWithEmailAndPassword(email, password)\r\n    .then((userCredential) => {\r\n        // Signed in\r\n        var user = userCredential.user;\r\n        if(user.emailVerified) {\r\n            localStorage.setItem('token', user.za);\r\n            window.location.href = window.location.protocol + '//' + window.location.host + '/basedashboard/home';\r\n        }\r\n        else {\r\n            localStorage.setItem('email', email);\r\n            window.location.href = window.location.protocol + '//' + window.location.host + '/confirmEmail';\r\n        }\r\n        \r\n    })\r\n    .catch((error) => {\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        setBtnText(\"Sign In\");\r\n        setLoader(false);\r\n        if(errorMessage === \"There is no user record corresponding to this identifier. The user may have been deleted.\") {\r\n            toast.info(\"No account exists with given email. Please sign up!\", {position: toast.POSITION.BOTTOM_LEFT});\r\n            window.location.href = window.location.protocol + '//' + window.location.host + '/signup'; \r\n        }\r\n        else if(errorMessage === \"The password is invalid or the user does not have a password.\") {\r\n            toast.error(\"Invalid email or password! Please check.\", {position: toast.POSITION.BOTTOM_LEFT});\r\n        }\r\n        else {\r\n            toast.error(errorMessage, {position: toast.POSITION.BOTTOM_LEFT})\r\n        }\r\n\r\n    });\r\n}\r\n\r\nexport default LoginPage;","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\PendingInvites\\PendingInvites-MyProfile.js",["133"],"import './PendingInvites-MyProfile.css';\r\nimport { Link } from 'react-router-dom';\r\nimport CmpPI from './CmpPending'\r\nimport React from 'react';\r\nimport firebase from 'firebase';\r\nimport refreshToken from '../../../functions/refreshToken';\r\n\r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\nexport default class MyProfilePI extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            avatar: ''\r\n        }\r\n    } \r\n\r\n    componentDidMount() {\r\n\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            localStorage.setItem('photoURL', user.photoURL);\r\n\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n\r\n        refreshToken();\r\n        \r\n        this.setState({\r\n            avatar : localStorage.getItem('photoURL')\r\n        });         \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"MyProfilePI\">   \r\n    \r\n                <div className=\"mp-top-nav\">\r\n    \r\n                    <div className=\"mp-left-wrapper\">\r\n                        <p className=\"bd-title\">zode</p>\r\n                    </div>\r\n    \r\n                    <div className=\"mp-mid-wrapper\">\r\n                        <p>BASE&nbsp;&nbsp;DASHBOARD</p>\r\n                    </div>\r\n    \r\n                    <div className=\"mp-right-wrapper\">\r\n    \r\n                        <div className=\"mp-profile-icon-wrapper\">\r\n                            \r\n                            <div>\r\n                                <img className=\"xp-icon\" src = { this.state.avatar }/>\r\n                            </div>\r\n    \r\n                            <div className=\"mp-dropdown-content\">\r\n                                <Link to=\"/basedashboard/home\" style={{ textDecoration: 'none' }}><p>Home</p></Link>\r\n                                <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>        \r\n        \r\n                <div className=\"mp-body\">\r\n                    <div className=\"mpb-col1\">\r\n                        <div className=\"mpb-col1-items\">\r\n                            <div className=\"mpb-col1-item1\">\r\n                                <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p className=\"p-label\">Profile</p></Link>\r\n                            </div>\r\n                            <div className=\"mpb-col1-item2\">\r\n                                <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p className=\"p-label\">Pending Invites</p></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mpb-col2\">\r\n                        <CmpPI />\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );      \r\n    }\r\n}","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\Base.js",["134","135"],"import './Base.css';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport firebase from 'firebase';\r\nimport refreshToken from '../../functions/refreshToken';\r\nimport newProjectSVG from '../../assets/newProject.svg';\r\nimport CirclesLoader from '../Loader/CirclesLoader';\r\n//import loader from '../Loader/Loader'\r\n\r\nexport default class BaseDashboard  extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            apiData: null,\r\n            isEmpty: false,\r\n            avatar: ''\r\n        }\r\n    }   \r\n    async componentDidMount() {\r\n        this.getProfileImageURL();\r\n        refreshToken(); \r\n\r\n        const token = localStorage.getItem('token');\r\n        \r\n        const config = {\r\n            headers: {\r\n                'Authorization': token,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n       \r\n        axios.get('https://projectservice-zode.herokuapp.com/api/projects/getprojects', config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {\r\n                \r\n                const Data = res.data;      \r\n                this.setState({ apiData: Data });\r\n                if(res.data == null) {\r\n                    this.setState({ isEmpty: true });\r\n                } else {\r\n                    this.setState({ isEmpty: false }); \r\n                }              \r\n\r\n            } else {\r\n    \r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            if(error.response.status === 401) {\r\n                refreshToken();\r\n            }            \r\n        });         \r\n    }\r\n\r\n    getProfileImageURL() {\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            return user.photoURL;\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n    }\r\n\r\n    componentWillUnmount() {\r\n       \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"BaseDashboard\">\r\n\r\n                <div className=\"bd-top-nav\">\r\n    \r\n                    <div className=\"bd-left-wrapper\">\r\n                        <p className=\"bd-title\">zode</p>\r\n                    </div>\r\n    \r\n                    <div className=\"bd-right-wrapper\">\r\n    \r\n                        <div className=\"bd-profile-icon-wrapper\">\r\n    \r\n                            <div>\r\n                                <img className=\"bd-icon\" src = { this.getProfileImageURL() }/>\r\n                            </div>\r\n    \r\n                            <div className=\"bd-dropdown-content\">\r\n                                <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p>Profile</p></Link>\r\n                                <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p>Pending Invites</p></Link>\r\n                                <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n                <div className=\"search-etc-section\">\r\n    \r\n                    <div className=\"heading-wrapper\">\r\n                        <p className=\"heading\">PROJECTS</p>\r\n                    </div>\r\n    \r\n                    <div className=\"search-wrapper\">\r\n                        <input type=\"text\" className=\"search\"></input>\r\n                    </div>\r\n    \r\n                    <div className=\"\">\r\n                        <Link to=\"/basedashboard/createproject\"> <input type=\"submit\" value=\"New Project\" className=\"new-project-btn\"></input></Link>                     \r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"hdn\">\r\n    \r\n                    <div className=\"free-box\">      \r\n                    </div>   \r\n                                 \r\n                    <div className=\"wrapper-x\">\r\n                        <p className=\"project-name-x\">Project Name</p>\r\n                        <p className=\"deadline-x\">Deadline</p>\r\n                        <p className=\"team-lead-x\">Team Lead</p>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"full-boxes-wrapper\">\r\n                { !this.state.apiData ? (        \r\n                        this.state.isEmpty ? (\r\n                            <div className=\"x-empty\">\r\n                                <img src={newProjectSVG} className=\"bd-new-svg\"></img>\r\n                                <span>No projects found! Create a new project <Link to=\"/basedashboard/createproject\">here.</Link></span>\r\n                            </div>\r\n                        ): (\r\n                            <div className=\"x-loading\">\r\n                                <CirclesLoader />\r\n                            </div>\r\n                        )                        \r\n                    ):( this.state.apiData.map(qdata => (\r\n                        \r\n                        <div className=\"single-box-wrapper\" onClick={ () => this.boxfn(qdata) }>\r\n    \r\n                            <div className=\"rocket-svg-wrapper\">\r\n                                <div className=\"rocket-svg\"></div>\r\n                            </div>\r\n                        \r\n                            <div className=\"inbox-wrapper\">    \r\n                                <div className=\"wrapper-y\">\r\n\r\n                                    <p className=\"project-name\">{JSON.parse(JSON.stringify(qdata.projectName))}</p>\r\n                                    <p className=\"deadline\">{JSON.parse(JSON.stringify(qdata.deadline))}</p>\r\n                                    <p className=\"team-lead\">{JSON.parse(JSON.stringify(qdata.teamlead))}</p>\r\n                            </div> \r\n    \r\n                            <div className=\"line-wrapper\">\r\n                                <div className=\"progress-line\"></div>\r\n                            </div> \r\n\r\n                        </div>\r\n    \r\n                    </div>                        \r\n\r\n                    ))\r\n                        \r\n                    )}\r\n    \r\n                </div> \r\n                               \r\n            </div>\r\n        );        \r\n    }\r\n\r\n    boxfn = function(data) {\r\n        localStorage.setItem('pdata', JSON.stringify(data));\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/projectdashboard/home';\r\n    }\r\n}","F:\\projects\\zod-frontend\\zod\\src\\components\\Home\\Home.js",[],"F:\\projects\\zod-frontend\\zod\\src\\components\\Chat\\CreateChannel.js",["136","137"],"import { Link } from \"react-router-dom\";\r\nimport './CreateChannel.css';\r\nimport ccSvg from '../../assets/channel.svg';\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport { toast } from \"react-toastify\";\r\nimport Button from 'react-bootstrap-button-loader';\r\n\r\ntoast.configure()\r\n\r\nlet emails = [];\r\n\r\nfunction CreateChannel() {\r\n    const [channelName, setChannelName] = useState('');\r\n    const [members, setMembers] = useState([{name: \"\", email: \"\"}]);\r\n    const [allmembers, setAllMembers] = useState([{name: \"\", email: \"\"}]);\r\n    const [channelDesc, setDesc] = useState('');\r\n    const [loading, setLoader] = useState(false);\r\n    const [btnText, setBtnText] = useState('Create');\r\n\r\n    const handleChannelNameChange = (e) => setChannelName(e.target.value);\r\n    const handleDescChange = (e) => setDesc(e.target.value);\r\n\r\n    const optionClicked = (e, index) => {\r\n        if(index == emails.length) {\r\n            if(!emails.includes(e.target.value)) {\r\n                emails.push({email: e.target.value});\r\n            }\r\n        }\r\n        else if(index < emails.length) {\r\n            emails[index].email = e.target.value;\r\n        }\r\n    }\r\n\r\n    const handleRemoveBtn = index => {\r\n        const list = [...members];\r\n        list.splice(index, 1);\r\n        setMembers(list);\r\n        if(emails[index].email!=undefined) {\r\n            emails = emails.filter(function(item) {\r\n                return item.email !== emails[index].email\r\n            })\r\n        }        \r\n    };\r\n\r\n    const handleAddBtn = () => {\r\n        setMembers([...members, { name: \"\", email: \"\" }]);\r\n    };\r\n\r\n    function CreateChannelRequest(name, desc, members) {\r\n        setLoader(true);\r\n        setBtnText('Creating..');\r\n        const projectData = JSON.parse(localStorage.getItem(\"pdata\"));\r\n        const projectID = projectData.projectID;\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': localStorage.getItem(\"token\")\r\n            }\r\n        }\r\n        axios.post('https://zode-chat-service-test.herokuapp.com/api/channel/new', {\r\n            channelName: name,\r\n            projectid: projectID,\r\n            description: desc,\r\n            members\r\n        }, config).then((response) => {\r\n            console.log(response);\r\n            if(response.status === 201) {\r\n                toast.info('Channel Created!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setTimeout(() => {\r\n                    window.location.href = window.location.protocol + '//' + window.location.host + '/chat/home';\r\n                  }, 2500);\r\n            }\r\n        }).catch((error) => {\r\n            setBtnText('Create');\r\n            setLoader(false);\r\n            toast.error(error.message, {position: toast.POSITION.BOTTOM_LEFT});\r\n        })\r\n        }\r\n\r\n    const getMembers = () => {\r\n    let projectData = JSON.parse(localStorage.getItem(\"pdata\"));\r\n    let url = 'https://projectservice-zode.herokuapp.com/api/projects/' + projectData.projectID + '/members';\r\n    axios.get(url, {headers: {\r\n        \"Access-Control-Allow-Origin\" : \"*\",\r\n        \"Authorization\": localStorage.getItem(\"token\")\r\n    }}).then(response => {\r\n        setAllMembers(response.data.projectMembers);\r\n    })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMembers();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"zod-create-channel-page\">\r\n            <div className=\"bd-top-nav\">\r\n                <div className=\"bd-left-wrapper\">\r\n                    <p className=\"bd-title\">zode</p>\r\n                </div>\r\n    \r\n            <div className=\"bd-right-wrapper\">\r\n                <div className=\"bd-profile-icon-wrapper\">\r\n                    <div className=\"bd-icon-1\">\r\n                        <p className=\"bd-icon-txt\">JD</p> \r\n                    </div>\r\n    \r\n                    <div className=\"bd-dropdown-content-1\">\r\n                        <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p>My Profile</p></Link>\r\n                        <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p>Pending Invites</p></Link>\r\n                        <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"cc-svg-1\">\r\n            <img src={ccSvg} alt=\"Create Channel SVG\" className=\"create-channel-svg\"></img>\r\n        </div>\r\n\r\n        <div className=\"cc-wrapper\">\r\n            <h1>Create Channel</h1>\r\n            <h3>Channel Name</h3>\r\n            <input type=\"text\" className=\"cc-name\" onChange={handleChannelNameChange}></input>\r\n            <h3>Description</h3>\r\n            <textarea className=\"cc-desc\" onChange={handleDescChange}></textarea>\r\n            <h3 className=\"cc-members-title\">Members</h3>\r\n            {members.map((x, i) => {\r\n                return (\r\n                    <div className=\"cpm-box\">\r\n                        <div className=\"cpm-one-row-wrapper\">\r\n                            <select name=\"members\" id={\"members\"} onChange={(e) => optionClicked(e, i)}>\r\n                            <option value=\"none\" selected disabled hidden> Select Members </option>\r\n                            {allmembers.map((members, index) => <option key={members.email} value={members.email} id={\"members\" + index}>{members.name} - {members.email}</option>)}\r\n                            </select>\r\n                            <span className=\"cpm-btn-box\">\r\n                                {members.length !== 1 && <button onClick={() => handleRemoveBtn(i)} className=\"cpm-remove-btn\">Remove</button>}\r\n                                {members.length - 1 === i && <button onClick={handleAddBtn} className=\"cpm-add-btn\">New</button>}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n        <Button variant=\"success\" loading={loading} className=\"cc-create-btn\" onClick={CreateChannelRequest.bind(this, channelName, channelDesc, emails)}>{btnText}</Button>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CreateChannel;","F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\Board.js",["138","139","140","141","142"],"import './Board.css';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport React from 'react';\r\nimport refreshToken from '../../functions/refreshToken';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport firebase from 'firebase';\r\n\r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\n\r\nexport default class Board extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            data: '',\r\n            pname: '',\r\n            personalArr: [],\r\n            publicArr: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n     \r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            localStorage.setItem('photoURL', user.photoURL);\r\n\r\n        } else {\r\n            // Not Signed-in\r\n        }\r\n\r\n        refreshToken();\r\n\r\n        const token1 = localStorage.getItem('token');\r\n        const obj = JSON.parse(localStorage.getItem('pdata'));\r\n\r\n        this.setState({\r\n            pname : obj.projectName\r\n        }); \r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': token1,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n    \r\n        let url = 'https://boardservice-zode.herokuapp.com/api/board/' + obj.projectID;\r\n\r\n        axios.get(url, config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {\r\n\r\n                const dat = res.data;\r\n                \r\n                for (const [index, value] of dat.entries()) {\r\n                    \r\n                    if(value.type == 'private') {\r\n                        \r\n                        this.setState({\r\n                            personalArr : [...this.state.personalArr, value]\r\n                        }); \r\n                    } else {\r\n\r\n                        this.setState({\r\n                            publicArr : [...this.state.publicArr, value]\r\n                        }); \r\n                    }\r\n                }\r\n\r\n                /*alert(JSON.stringify(this.state.personalArr));\r\n                alert(JSON.stringify(this.state.publicArr));*/\r\n\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            if(error.response.status === 401) {\r\n                refreshToken();\r\n            }\r\n        });         \r\n    }\r\n\r\n    personalFn = (obj) => {\r\n    \r\n        console.log(obj);\r\n        localStorage.setItem('boardobj', JSON.stringify(obj));\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/projectdashboard/board/card';   \r\n    }\r\n\r\n    publicFn = (obj) => {\r\n\r\n        console.log(obj);\r\n        localStorage.setItem('boardobj', JSON.stringify(obj));\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/projectdashboard/board/card';\r\n    }\r\n\r\n    backToBaseFn = () => {\r\n        //localStorage.setItem('pdata');\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/basedashboard/home';       \r\n    }\r\n\r\n    logout = () => {\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/login';   \r\n    }\r\n\r\n    // delete board\r\n    deleteFn = (bobj) => {\r\n\r\n        const pobj = JSON.parse(localStorage.getItem('pdata'));\r\n        const tokeny = localStorage.getItem('token');\r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': tokeny,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n      \r\n        const reqBody = {\r\n            \"boardId\": bobj.boardId,\r\n            \"projectId\": pobj.projectID\r\n        }\r\n\r\n        //alert(JSON.stringify(reqBody));\r\n\r\n        const url = 'https://boardservice-zode.herokuapp.com/api/board/delete';\r\n\r\n        axios.post(url, reqBody, config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {               \r\n\r\n                toast.info('Board Deleted!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                }); \r\n\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 3000);                \r\n\r\n            } else {\r\n          \r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            if(error.response.status === 401) {\r\n                refreshToken();\r\n            }\r\n        });   \r\n\r\n    }\r\n    getProfileImageURL() {\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            return user.photoURL;\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n    }\r\n\r\n\r\n    render() {\r\n    \r\n        return (\r\n            <div className=\"Board\">\r\n                \r\n                <div className=\"b-top-nav\">\r\n\r\n                    <div className=\"pd-left-wrapper\">\r\n                        <div className=\"pd-lb\"><p className=\"pd-title\" onClick={ this.backToBaseFn }>zode</p></div>\r\n                    </div>\r\n    \r\n                    <div className=\"bd-right-wrapper\">\r\n    \r\n                        <div className=\"bd-profile-icon-wrapper\">\r\n\r\n                            <div>\r\n                                <img className=\"bd-icon\" src = { this.getProfileImageURL() }/>\r\n                            </div>\r\n\r\n                            <div className=\"bd-dropdown-content\">\r\n                                <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p>Profile</p></Link>\r\n                                <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p>Pending Invites</p></Link>\r\n                                <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n                <div className=\"b-body-wrapper\">\r\n\r\n                    <div className=\"b-left-nav\">\r\n                        \r\n                        <div className=\"b-left-nav-grid\">\r\n                            \r\n                            <Link to=\"/projectdashboard/home\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"b-lng1-wrapper\">\r\n                                    <div className=\"b-lng1\" data-tip data-for=\"homeTip\"></div>\r\n                                </div>\r\n                            </Link> \r\n\r\n                            <Link to=\"/projectdashboard/board/bhome\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"b-lng2\" data-tip data-for=\"boardTip\">\r\n                                </div>\r\n                            </Link>\r\n\r\n                            <Link to=\"/chat/home\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"b-lng3\" data-tip data-for=\"chatTip\">\r\n                                </div>\r\n                            </Link>               \r\n\r\n                            <Link to=\"/projectdashboard/calender\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"b-lng4\" data-tip data-for=\"calTip\"></div>\r\n                            </Link>\r\n\r\n                            <Link to=\"/meet/scheduleNew\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"b-lng5\" data-tip data-for=\"videoCallTip\"></div>\r\n                            </Link>\r\n                            <div className=\"b-lng6\" data-tip data-for=\"noneTip\"></div>\r\n                            <div className=\"b-lng7\" data-tip data-for=\"noneTip\"></div>\r\n\r\n                            <ReactTooltip id=\"homeTip\" place=\"right\" effect=\"float\" type=\"dark\">Home</ReactTooltip> \r\n                            <ReactTooltip id=\"boardTip\" place=\"right\" effect=\"float\" type=\"dark\">Board</ReactTooltip>\r\n                            <ReactTooltip id=\"chatTip\" place=\"right\" effect=\"float\" type=\"dark\">Chat</ReactTooltip> \r\n                            <ReactTooltip id=\"calTip\" place=\"right\" effect=\"float\" type=\"dark\">Calender</ReactTooltip>\r\n                            <ReactTooltip id=\"videoCallTip\" place=\"right\" effect=\"float\" type=\"dark\">Meet/Video Call</ReactTooltip>\r\n                            <ReactTooltip id=\"noneTip\" place=\"right\" effect=\"float\" type=\"dark\">None</ReactTooltip>\r\n                                                         \r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"b-body\">\r\n                        \r\n                        <div className=\"bb-proname\">\r\n                            <p>Project Name: { this.state.pname }</p>\r\n                        </div>\r\n                        <div className=\"bb-proLine\"></div>\r\n\r\n                        <div className=\"bb-wrapper\">\r\n                            \r\n                            <div className=\"bb-personalB\">\r\n\r\n                                <p className=\"bbPersonal-hdn\">Personal Boards</p>\r\n                                \r\n                                <div className=\"bbPersonal-card-wrapper\">\r\n\r\n                                    { !this.state.personalArr ? (\r\n                                    \r\n                                        <div className=\"gx-loading\">\r\n                                            <p>Loading...</p>\r\n                                        </div>                                    \r\n\r\n                                    ):( this.state.personalArr.map((pdat, i) => (\r\n                                        \r\n                                        <div className=\"bbPersonal-card\">\r\n                                            <div className=\"bbPersonal-delete\" onClick = { () => this.deleteFn(pdat) }></div>\r\n                                            <div className=\"bbPersonal-parag\" onClick = { () => this.personalFn(pdat) }>\r\n                                                <p>{ JSON.parse(JSON.stringify(pdat.boardName)) }</p>\r\n                                            </div>\r\n                                        </div>   \r\n                                    )))}   \r\n                                    \r\n                                    <Link to=\"/projectdashboard/board/personal/create\" style={{ textDecoration: 'none' }}>\r\n                                        <div className=\"bbPersonal-special-card\">\r\n                                            <div className=\"bbPersonal-xy\">\r\n                                                <div className=\"bbPersonal-plus\"></div>\r\n                                                <div><p className=\"bbPersonal-new-parag\">New Board</p></div>\r\n                                            </div>\r\n                                        </div>    \r\n                                    </Link>                                                           \r\n                                \r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"bb-publicB\">\r\n                                \r\n                                <p className=\"bbPublic-hdn\">Public Boards</p>\r\n                                \r\n                                <div className=\"bbPublic-card-wrapper\">\r\n                                    \r\n                                    { !this.state.publicArr ? (\r\n                                        \r\n                                        <div className=\"gx-loading\">\r\n                                            <p>Loading...</p>\r\n                                        </div>                                    \r\n\r\n                                    ):( this.state.publicArr.map((tdat, i) => (\r\n                           \r\n                                        <div className=\"bbPublic-card\">\r\n                                            <div className=\"bbPublic-delete\" onClick = { () => this.deleteFn(tdat) }></div>\r\n                                            <div className=\"bbPublic-parag\" onClick = { () => this.publicFn(tdat) }>\r\n                                                <p>{ JSON.parse(JSON.stringify(tdat.boardName)) }</p>\r\n                                            </div>                                            \r\n                                        </div>                                         \r\n                                    )))}    \r\n                                      \r\n                                    <Link to=\"/projectdashboard/board/public/create\" style={{ textDecoration: 'none' }}>\r\n                                        <div className=\"bbPublic-special-card\">\r\n                                            <div className=\"bbPublic-xy\">\r\n                                                <div className=\"bbPublic-plus\"></div>\r\n                                                <div><p className=\"bbPublic-new-parag\">New Board</p></div>\r\n                                            </div>\r\n                                        </div>                                                               \r\n                                    </Link>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","F:\\projects\\zod-frontend\\zod\\src\\components\\ResetPassword\\ResetPassword.js",[],"F:\\projects\\zod-frontend\\zod\\src\\components\\Chat\\ChatHome.js",["143","144","145","146","147","148","149","150","151","152","153"],"import { Link, Route } from 'react-router-dom';\r\nimport './ChatHome.css';\r\n\r\nimport DynamicChatDisplay from './DynamicChatDisplay';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport refreshToken from '../../functions/refreshToken';\r\nimport {toast} from 'react-toastify';\r\nimport socketIOClient from 'socket.io-client';\r\nimport firebase from 'firebase';\r\n\r\nlet projectDetails = JSON.parse(localStorage.getItem('pdata'));\r\nlet ENDPOINT;\r\nif(projectDetails) {\r\nENDPOINT = 'https://chatservice-zode.herokuapp.com/'+ projectDetails.projectID + \"/chat\";\r\n}\r\ntoast.configure()\r\n\r\nfunction ChatHome() {\r\n    let [activeComponent, setActiveComponent] = useState('default'); \r\n    let [channelNames, setChannelName] = useState([]);\r\n    let [channelMembers, setChannelMembers] = useState([]);\r\n    let [activeChannelId, setActiveChannelId] = useState('');\r\n    const [response, setResponse] = useState('');\r\n    const [allMessages, setAllMessages] = useState([]);\r\n    //const socket = socketIOClient(ENDPOINT, {auth: {Authorization: localStorage.getItem('token')}});\r\n    \r\n    function fetchChannels() {\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/channel/\" + projectDetails.projectID;\r\n        axios.get(url, {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n            setChannelName(response.data);\r\n        }).catch(error => {\r\n            if(error.response.status === 401) {\r\n                refreshToken();\r\n                toast.error(\"Session expired! Reloading....\", {position: \"bottom-right\"});\r\n                setTimeout(() => {\r\n                    window.location.href = window.location.protocol + '//' + window.location.host + '/chat/home';\r\n                }, 2500);\r\n            }\r\n        })\r\n    }\r\n\r\n    function chatHomeCallback(channelId) {\r\n        let i;\r\n        for(i=0;i<channelNames.length; i++) {\r\n            if(channelNames[i].channelid == channelId) {\r\n                break;\r\n            }\r\n        }\r\n        if(i<channelNames.length) {\r\n            let channelDisplay = document.getElementById(\"channel\"+i);\r\n            if(channelDisplay!=null) {\r\n                channelDisplay.style.fontWeight = \"bold\";\r\n            }\r\n        }\r\n    }\r\n    \r\n    function channelClicked(channel, index) {\r\n        setActiveComponent(channel.channelName); \r\n        setActiveChannelId(channel.channelid);\r\n        let displayValue = document.getElementById(\"dcd-members-list\"); \r\n        if(displayValue != null && displayValue.style.display != \"none\") { \r\n            document.getElementById(\"dcd-members-list\").style.display = \"none\";\r\n        }\r\n        let channelDisplay = document.getElementById(\"channel\" + index);\r\n        if(channelDisplay!=null) {\r\n            channelDisplay.style.fontWeight = \"normal\";\r\n        }\r\n\r\n    }\r\n\r\n    function getProfileImageURL() {\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            console.log(user.photoURL);\r\n            return user.photoURL;\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n    }\r\n    useEffect(() => {\r\n        fetchChannels();\r\n        let socket = socketIOClient(ENDPOINT, {auth: {Authorization: localStorage.getItem('token')}});\r\n        /*socket.on(\"connection\", data => {\r\n          setResponse(data);\r\n          console.log(response);\r\n        });*/\r\n        \r\n        return () => socket.disconnect();\r\n    }, []);\r\n    return(\r\n        <div className=\"zod-chat-homepg\">\r\n        <div className=\"bd-top-nav\">\r\n                <div className=\"bd-left-wrapper\">\r\n                    <Link to=\"/basedashboard/home\" style={{ textDecoration: 'none' }}><p className=\"bd-title\">zode</p></Link>\r\n                </div>\r\n    \r\n            <div className=\"bd-right-wrapper\">\r\n                <div className=\"bd-profile-icon-wrapper\">\r\n                    <div>\r\n                        <img className=\"bd-icon\" src = { getProfileImageURL() }/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"ch-left-nav\">\r\n                        \r\n            <div className=\"pd-left-nav-grid\">\r\n                <Link to=\"/projectdashboard/home\" style={{ textDecoration: 'none' }}>\r\n                    <div className=\"ch-lng1-wrapper\">\r\n                        <div className=\"ch-lng1\" data-tip data-for=\"homeTip\"></div>\r\n                    </div>\r\n                </Link> \r\n                <Link to=\"/projectdashboard/board/bhome\" style={{ textDecoration: 'none' }}>\r\n                    <div className=\"pd-lng2\" data-tip data-for=\"boardTip\"></div>\r\n                </Link>\r\n                <Link to=\"/chat/home\" style={{ textDecoration: 'none' }}><div className=\"ch-lng3\" data-tip data-for=\"chatTip\"></div></Link>\r\n                <Link to=\"/projectdashboard/calender\" style={{ textDecoration: 'none' }}>\r\n                    <div className=\"personal-cb-lng4\" data-tip data-for=\"calTip\"></div>\r\n                </Link>\r\n                <Link to=\"/meet/scheduleNew\" style={{ textDecoration: 'none' }}>\r\n                    <div className=\"pd-lng5\" data-tip data-for=\"videoCallTip\"></div>\r\n                </Link>\r\n                <div className=\"pd-lng6\"></div>\r\n                <div className=\"pd-lng7\"></div>\r\n                <ReactTooltip id=\"chatTip\" place=\"right\" effect=\"float\" type=\"dark\">Chat</ReactTooltip> \r\n                <ReactTooltip id=\"homeTip\" place=\"right\" effect=\"float\" type=\"dark\">Home</ReactTooltip> \r\n                <ReactTooltip id=\"boardTip\" place=\"right\" effect=\"float\" type=\"dark\">Board</ReactTooltip>\r\n                <ReactTooltip id=\"calTip\" place=\"right\" effect=\"float\" type=\"dark\">Calendar</ReactTooltip>\r\n                <ReactTooltip id=\"videoCallTip\" place=\"right\" effect=\"float\" type=\"dark\">Meet/Video Call</ReactTooltip>            \r\n            </div>\r\n        </div>\r\n        <div className=\"ch-leftnav-2\">\r\n            <h2 className=\"ch-project-title\">{projectDetails.projectName}</h2>\r\n            <hr></hr>\r\n            <h3>Channels <Link to=\"/chat/createChannel\"><button className=\"ch-newchannel-btn\">+New</button></Link></h3>\r\n            <div className=\"ch-channels-list\">\r\n                {channelNames.map((channel, index) => <button onClick={channelClicked.bind(this, channel, index)} id={\"channel\"+index}>@{channel.channelName}</button>)}\r\n            </div>\r\n        </div>\r\n        <div className=\"ch-chat-display\">\r\n            {channelNames.length == 0 && <DynamicChatDisplay projectname={projectDetails.projectName} channelname={activeComponent} channelId={null} messages={[]}/>}\r\n            {channelNames.length != 0 && <DynamicChatDisplay projectname={projectDetails.projectName} channelname={activeComponent} channelId={activeChannelId} messages={allMessages} callBack={chatHomeCallback.bind(this)}/>}\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ChatHome;","F:\\projects\\zod-frontend\\zod\\src\\components\\ProjectDashboard\\ProjectD.js",["154","155"],"F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\Profile\\CmpProfile.js",["156","157","158","159","160"],"import './CmpProfile.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport React, { useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport firebase from 'firebase';\r\nimport refreshToken from '../../../functions/refreshToken';\r\n\r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\n\r\nexport default class CmpProfile  extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            avatar: '',\r\n            valx: false,\r\n            nameChange: false,\r\n        }   \r\n\r\n    }   \r\n    \r\n    componentDidMount(){\r\n\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            console.log(user.displayName);\r\n            console.log(user.email);\r\n            console.log(user.photoURL);\r\n            localStorage.setItem('photoURL', user.photoURL);\r\n\r\n            this.setState({\r\n                name: user.displayName,\r\n                email: user.email,\r\n                valx: true\r\n            });\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n\r\n        refreshToken();\r\n        this.setState({\r\n            avatar : localStorage.getItem('photoURL')\r\n        });     \r\n        \r\n    }\r\n\r\n    render() {        \r\n\r\n        return (\r\n            <div className=\"MyProfile\">\r\n\r\n                <div className=\"mp-wrapper\">\r\n                    \r\n                    { !this.state.valx ? (\r\n                        <div className=\"mp-loading\">\r\n                            <p>Loading...</p>\r\n                        </div>\r\n                    ):(\r\n                        <p></p>\r\n                    )\r\n                    }\r\n                  \r\n                    <div>\r\n                        <img  className=\"mp-profile-img\" src = { this.state.avatar }/>\r\n                    </div>\r\n                    \r\n                    <div className=\"mp-inp-wrapper\">    \r\n\r\n                        <div className=\"mp-x\">\r\n\r\n                            <div className=\"mp-class1\">\r\n                                \r\n                                <div className=\"mp-name\">\r\n                                    <p className=\"mp-name-label\">Name</p>\r\n                                    <div><input type=\"text\" placeholder=\"\"  className=\"mp-name-inp1\" value={this.state.name} onChange={evt => this.updateName(evt)}></input></div>\r\n                                </div>\r\n                            \r\n                            </div>\r\n\r\n                            <div className=\"mp-class2\">\r\n                                <p className=\"mp-email\">Email</p>\r\n                                <div><input type=\"text\" placeholder=\"\" className=\"mp-email-inp\" value={this.state.email} disabled></input></div>                            \r\n                                <div><input value=\"Update Profile\" type=\"submit\" className=\"mp-update-btn\" onClick = { this.updateProfile } ></input></div> \r\n                                <div><input value=\"Delete Account\" type=\"submit\" className=\"mp-delete-btn\"onClick = { this.deleteAccount } ></input></div> \r\n                            </div>\r\n\r\n                            <ToastContainer />\r\n                        </div>            \r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateName = (evt) => {\r\n\r\n        this.setState({\r\n            name: evt.target.value,\r\n            nameChange: true\r\n          });\r\n    }    \r\n    \r\n    updateProfile = () => {\r\n\r\n        if(this.state.nameChange == true ) {\r\n            \r\n            const token = localStorage.getItem('token');\r\n\r\n            const reqBody = {\r\n                \"name\": this.state.name,\r\n            }\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Authorization': token,\r\n                    'Content-Type': 'application/json',\r\n                    'Access-Control-Allow-Origin' : '*',\r\n                }\r\n            }\r\n        \r\n            axios.put('https://userservice-zode.herokuapp.com/api/user/update', reqBody, config)\r\n            .then((res) => {\r\n        \r\n                if(res.status === 200) {\r\n                    \r\n                    toast.info('Name Changed!', {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                    \r\n                    this.setState({\r\n                        lnameChange: false,\r\n                        fnameChange: false\r\n                    }); \r\n\r\n                    setTimeout(() => {\r\n                        window.location.reload();\r\n                      }, 4000);                    \r\n\r\n                } else {\r\n                    toast.warning('Error!', {\r\n                        position: \"bottom-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });  \r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                if(error.response.status === 401) {\r\n                    refreshToken();\r\n                }\r\n            }); \r\n\r\n        } else {\r\n            alert('Nothing Updated!')\r\n        }     \r\n    }      \r\n \r\n    deleteAccount = () => {\r\n\r\n        var r = window.confirm(\"Confirm: Delete Account\");\r\n        if(r == true) {\r\n            toast.error('Account Deleted!', {\r\n                position: \"bottom-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n            }); \r\n        } else {\r\n\r\n        } \r\n    \r\n    }     \r\n}","F:\\projects\\zod-frontend\\zod\\src\\components\\BaseDashboard\\PendingInvites\\CmpPending.js",["161","162","163"],"import './CmpPending.css';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport noInvitesSVG from '../../../assets/noInvites.svg';\r\nimport refreshToken from '../../../functions/refreshToken';\r\nimport CirclesLoader from '../../Loader/CirclesLoader';\r\n\r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\n\r\nexport default class CmpPending  extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            apiData: null,\r\n            isEmpty: false\r\n        }   \r\n\r\n    }   \r\n    \r\n    componentDidMount(){       \r\n\r\n        refreshToken();\r\n     \r\n        const token = localStorage.getItem('token');\r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': token,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n    \r\n        axios.get('https://projectservice-zode.herokuapp.com/api/projects/invites', config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {\r\n                this.setState({ apiData: res.data });\r\n                if(res.data == null) {\r\n                    this.setState({ isEmpty: true });\r\n                } else {\r\n                    this.setState({ isEmpty: false }); \r\n                }\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            if(error.response.status === 401) {\r\n                refreshToken();\r\n            } \r\n        });         \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    acceptfn(pid) {\r\n\r\n        const atoken = localStorage.getItem('token');\r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': atoken,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n        \r\n        const reqBody = {\r\n            \"projectID\": pid\r\n        }\r\n\r\n        axios.put('https://projectservice-zode.herokuapp.com/api/projects/acceptInvite', reqBody, config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {\r\n                toast.info('Accepted!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 3000);\r\n                \r\n            } else {\r\n                toast.warning('Error!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });  \r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });         \r\n    }\r\n\r\n    rejectfn(pid) {\r\n\r\n        const rtoken = localStorage.getItem('token');\r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': rtoken,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n        \r\n        const reqBody = {\r\n            \"projectID\": pid\r\n        }\r\n\r\n        axios.put('https://projectservice-zode.herokuapp.com/api/projects/rejectinvite', reqBody, config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {\r\n                toast.info('Rejected!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setTimeout(() => {\r\n                    window.location.reload();\r\n                }, 3000);\r\n\r\n            } else {\r\n                toast.warning('Error!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });  \r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });          \r\n    }\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div className=\"cmpPI\">\r\n    \r\n                <div className=\"cpi-wrapper\">\r\n\r\n                    { !this.state.apiData ? (\r\n                        \r\n                        this.state.isEmpty ? (\r\n                            \r\n                            <div className=\"cpi-empty\">\r\n                                <img src={noInvitesSVG} className=\"cpi-noinvite-svg\"></img>\r\n                                <span>No pending invites!</span>\r\n                            </div>\r\n                        ): (\r\n                            <div className=\"cpi-loading\">\r\n                                <CirclesLoader />\r\n                            </div>\r\n                        )\r\n\r\n                    ):( this.state.apiData.map(zdata => (\r\n\r\n                        <div className=\"cpi-box\">\r\n                    \r\n                            <div className=\"cpi-box-item1\">\r\n                                <div className=\"cpi-box-item1-wrapper\">\r\n                                    <p className=\"cpiY\">Project Name: {JSON.parse(JSON.stringify(zdata.projectName))}</p>\r\n                                    <p className=\"cpiY qw\">Invited By: {JSON.parse(JSON.stringify(zdata.teamlead))}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"cpi-box-item2\">\r\n                                <div><input value=\"Accept\" type=\"submit\" className=\"cpi-acceptBtn\" onClick={ () => this.acceptfn(zdata._id) }></input></div>\r\n                            </div>\r\n                            <div className=\"cpi-box-item3\">\r\n                                <div><input value=\"Reject\" type=\"submit\" className=\"cpi-rejectBtn\" onClick={ () => this.rejectfn(zdata._id) }></input></div>\r\n                            </div>\r\n                        </div>\r\n                    )))}             \r\n    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}    ","F:\\projects\\zod-frontend\\zod\\src\\components\\Chat\\DynamicChatDisplay.js",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"import emojiIcon from '../../assets/emoji_icon.svg';\r\nimport attachIcon from '../../assets/attachment_icon.svg';\r\nimport sendIcon from '../../assets/send_msg_icon.svg';\r\nimport ChatSVG from '../../assets/Chat-Home.svg';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './DynamicChatDisplay.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport Loader from '../Loader/Loader';\r\nimport Picker from 'emoji-picker-react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport firebase from 'firebase';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { toast } from 'react-toastify';\r\nlet projectDetails = JSON.parse(localStorage.getItem('pdata'));\r\nlet ENDPOINT;\r\nif(projectDetails) {\r\nENDPOINT = 'https://chatservice-zode.herokuapp.com/'+ projectDetails.projectID + \"/chat\";\r\n}\r\nlet index = 0;\r\nlet currentUserEmail = '';\r\nlet channelId = '';\r\nlet channelChanged = false;\r\n\r\nfunction DynamicChatDisplay(props) {\r\n    let currentUser = firebase.auth().currentUser;\r\n    let [channelMembers, setChannelMembers] = useState([]);\r\n    const [chosenEmoji, setChosenEmoji] = useState(null);\r\n    let [inputMsg, setInputMsg] = useState('');\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [newMembers, setNewMembers] = useState([]);\r\n    let [messages, setMessages] = useState([]);\r\n    const [flag, setFlag] = useState(0);\r\n    const [editedMsg, setEditMsg] = useState('');\r\n    let [hiddenInput, setHiddenInput] = useState('');\r\n    let prevMsgRef = useRef();\r\n\r\n    let channelMsgs = [];\r\n\r\n    if(props.channelId) {\r\n        channelId = props.channelId;\r\n    }\r\n    \r\n    const modalHandleClose = () => setShowModal(false);\r\n    const modalHandleShow = () => {\r\n        setShowModal(true);\r\n        fetchNewMembers();\r\n    };\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setChosenEmoji(emojiObject);\r\n        setInputMsg(inputMsg + emojiObject.emoji);\r\n    }\r\n    const onInputMsgChange = (e) => {\r\n        setInputMsg(e.target.value);\r\n    }\r\n\r\n    const onEditMsgChange = (e) => {\r\n        setEditMsg(e.target.value);\r\n    }\r\n\r\n    let projectDetails = JSON.parse(localStorage.getItem('pdata'));\r\n    function displayDropDown () {\r\n        let displayValue = document.getElementById(\"dcd-more-options\").style.display;\r\n        if(displayValue == \"none\") {\r\n            document.getElementById(\"dcd-more-options\").style.display = \"block\";\r\n        }\r\n        else {\r\n            document.getElementById(\"dcd-more-options\").style.display = \"none\";\r\n        }    \r\n    }\r\n    function newMessageReceived(data) {\r\n        if(data.channelid == channelId) {\r\n                channelMsgs.push(data);\r\n                setMessages(channelMsgs);\r\n                setFlag(0);\r\n                setHiddenInput('new message');\r\n                setHiddenInput('');\r\n                updateScroll();\r\n    }/*\r\n        if(data.channelid = channelId) {\r\n            let url = \"https://chatservice-zode.herokuapp.com/api/messages/\"+ channelId + \"?latest=\" + Math.floor(Date.now());\r\n            axios.get(url, {headers: {\r\n                \"Access-Control-Allow-Origin\" : \"*\",\r\n                \"Authorization\": localStorage.getItem(\"token\")\r\n            }}).then(response => {\r\n                setMessages(response.data);\r\n                setFlag(0);\r\n            })\r\n        }*/\r\n    }\r\n    function displayEmojiPicker () {\r\n        let displayValue = document.getElementById(\"dcd-emoji-picker\").style.display;\r\n        if(displayValue == \"none\") {\r\n            document.getElementById(\"dcd-emoji-picker\").style.display = \"block\";\r\n        }\r\n        else {\r\n            document.getElementById(\"dcd-emoji-picker\").style.display = \"none\";\r\n        }       \r\n    }\r\n\r\n    function displayEditMessage(i) {\r\n        let displayValue = document.getElementById(\"dcd-edit-msg-input\"+i);\r\n        if(displayValue) {\r\n            if(displayValue.style.display == \"none\") {\r\n                displayValue.style.display = \"block\";\r\n            }\r\n            else {\r\n                displayValue.style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n    function updateScroll(){\r\n        var element = document.getElementById(\"dcd-messages-display\");\r\n        if(element!=null) {\r\n            element.scrollTop = element.scrollHeight;\r\n        }\r\n    }\r\n\r\n    function fetchMembers() {\r\n        let channelId = props.channelId;\r\n        setChannelMembers([]);\r\n        let url = \"https://zode-chat-service-test.herokuapp.com/api/channel/\" + projectDetails.projectID + \"/\" + channelId + \"/members\";\r\n        axios.get(url, {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n            setChannelMembers(response.data);\r\n        })\r\n        let displayValue = document.getElementById(\"dcd-members-list\").style.display;\r\n        if(displayValue == \"none\") {\r\n            document.getElementById(\"dcd-members-list\").style.display = \"block\";\r\n        }\r\n        else {\r\n            document.getElementById(\"dcd-members-list\").style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    function fetchNewMembers() {\r\n        let channelId = props.channelId;\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/channel/\"+ projectDetails.projectID + \"/\"+ channelId + \"/fetchmembers\";\r\n        axios.get(url, {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n            setNewMembers(response.data);\r\n        })\r\n    }\r\n\r\n    function sendMessage() {\r\n        let channelId = props.channelId;\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/chat/\"+ channelId +\"/messages\";\r\n        axios.post(url, {\r\n            \"content\": inputMsg\r\n        },\r\n        {\r\n            headers: {\r\n                \"Access-Control-Allow-Origin\" : \"*\",\r\n                    \"Authorization\": localStorage.getItem(\"token\")\r\n                }\r\n            }\r\n        ).then(response => {\r\n            if(response.status == 200) {\r\n                setInputMsg('');\r\n            }\r\n        })\r\n    }\r\n\r\n    function timeConverter(unix_ts) {\r\n        let date = new Date(unix_ts);\r\n        let hours = date.getHours();\r\n        let minutes = \"0\" + date.getMinutes();\r\n        let formattedTime = date.toLocaleDateString('en-GB') + ' ' + (hours>12?hours-12:hours) + ':' + minutes.substr(-2) + (hours<12?'AM' : 'PM');\r\n        return formattedTime;\r\n    }\r\n\r\n    function getOlderMessages() {\r\n        let msgDiv = document.getElementById(\"dcd-messages-display\");\r\n        if(msgDiv != null && msgDiv.scrollTop == 0) {\r\n        if(messages.length>0) {\r\n        setFlag(1);\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/messages/\"+ props.channelId + \"?latest=\" + messages[0].ts;\r\n        axios.get(url, {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n                if(response.data!=[]) {\r\n                    index += 1;\r\n                    let temp = [];\r\n                    temp = response.data;\r\n                    messages = temp.concat(messages);\r\n                    setMessages(messages);\r\n                    let msg = document.getElementById(\"dcd-message\"+ ((index * 20)));\r\n                    if(msg!=null) {\r\n                        let pos = msg.offsetTop;\r\n                        msgDiv.scrollTop = pos;\r\n                    }   \r\n                }\r\n            })\r\n        }}\r\n    }\r\n\r\n    function deleteMessage(ts, i) {\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/chat/\"+ props.channelId +\"/messages/\" + ts;\r\n        axios.delete(url, {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n            if(response.status == 200) {\r\n                toast.success(\"Message Deleted\", {position: toast.POSITION.BOTTOM_RIGHT});\r\n            }\r\n        })\r\n    }\r\n\r\n    function editMessageRequest(i, editedMsg) {\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/chat/\" + props.channelId + \"/messages/\" + messages[i].ts + \"/update\";\r\n        axios.put(url, {\r\n            \"content\": editedMsg\r\n        } ,{headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n            if(response.status === 200) {\r\n                document.getElementById(\"dcd-edit-msg-input\"+i).style.display = \"none\";\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        channelMsgs = [];\r\n        channelId = props.channelId;\r\n        setMessages([]);\r\n        setHiddenInput('clear message');\r\n        setHiddenInput('');\r\n        let url = \"https://chatservice-zode.herokuapp.com/api/messages/\"+ props.channelId + \"?latest=\" + Math.floor(Date.now());\r\n        axios.get(url, {headers: {\r\n            \"Access-Control-Allow-Origin\" : \"*\",\r\n            \"Authorization\": localStorage.getItem(\"token\")\r\n        }}).then(response => {\r\n            setMessages(response.data);\r\n            setHiddenInput('channel change');\r\n            setHiddenInput('');\r\n            setFlag(0);\r\n            channelMsgs = response.data;\r\n        })\r\n        let socket = socketIOClient(ENDPOINT, {auth: {Authorization: localStorage.getItem('token')}});\r\n\r\n        socket.on(\"newMessage\", data=> {\r\n            if(channelId != data.channelid) {\r\n                props.callBack(data.channelid);\r\n            }\r\n            newMessageReceived(data);\r\n        })\r\n\r\n        socket.on(\"deleteMessage\", data=> {\r\n            let msgDiv = document.getElementById(\"dcd-messages-display\");\r\n            if(data.channelid == channelId) {\r\n                let i, value;\r\n                for(i=0;i<channelMsgs.length; i++) {\r\n                    if(channelMsgs[i].ts == data.ts) {\r\n                        value = channelMsgs[i];\r\n                        break;\r\n                    }\r\n                }\r\n                channelMsgs = channelMsgs.filter(item => item !== value);\r\n                setMessages(channelMsgs);\r\n                let msg = document.getElementById(\"dcd-message\"+ ((i-1)));\r\n                if(msgDiv && msg!=null) {\r\n                    let pos = msg.offsetTop;\r\n                    msgDiv.scrollTop = pos;\r\n                }\r\n            }  \r\n        })\r\n\r\n        socket.on(\"udpateMessage\", data => {\r\n            if(data.channelid == channelId) {\r\n                let i;\r\n                for(i=0;i<channelMsgs.length; i++) {\r\n                    if(channelMsgs[i].ts == data.ts) {\r\n                        channelMsgs[i].content = data.content;\r\n                    }\r\n                }\r\n                setMessages(channelMsgs);\r\n                setHiddenInput('message edited');\r\n                setHiddenInput('');\r\n            }\r\n        })\r\n        return () => socket.disconnect();\r\n    },[channelId]);\r\n\r\n    useEffect(() => {\r\n        if(flag == 0) {\r\n            updateScroll();\r\n        }\r\n    }, [messages.length, flag]);\r\n\r\n    useEffect(() => {\r\n        if(currentUser!=null) {\r\n            currentUserEmail = currentUser.email;\r\n        }\r\n    }, []);\r\n\r\n    if(props.channelname != 'default') {\r\n        return(\r\n        <div className=\"dcd-display\">\r\n        <div className=\"dcd-wrapper\">\r\n            <div className=\"dcd-header\">\r\n                <h3>{props.projectname} / {props.channelname}</h3>\r\n                <div className=\"dcd-icon-tray\">\r\n                    <div className=\"dcd-add-icon\" onClick={fetchMembers.bind(this)}></div>\r\n                    <div className=\"dcd-video-call-icon\"></div>\r\n                    <div className=\"dcd-more-options-icon\" onClick={displayDropDown}></div>\r\n                </div>\r\n                <div className=\"dcd-more-options\" id=\"dcd-more-options\">\r\n                    <p>Edit Channel</p>\r\n                    <p>Leave Channel</p>\r\n                    <p>Delete Channel</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"dcd-members-list-wrapper\" id=\"dcd-members-list\" style={{display: \"none\"}}>\r\n            <h3>Members</h3><button value=\"X\" className=\"dcd-members-closelist\" onClick={() => document.getElementById(\"dcd-members-list\").style.display = \"none\"}>X</button>\r\n            <button className=\"dcd-add-member-btn\" onClick={modalHandleShow}>+New</button>\r\n            <Modal show={showModal} onHide={modalHandleClose}>\r\n                <Modal.Header>\r\n                    <Modal.Title>Add New Member</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <select>\r\n                        <option value=\"none\" selected disabled hidden> Select New Member </option>\r\n                        {newMembers.map((x,i) => <option value={x.email}>{x.name}</option>)}\r\n                    </select>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={modalHandleClose}>\r\n                    Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={modalHandleClose}>\r\n                    Add\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            {channelMembers.length == 0 && <Loader/>}\r\n            {channelMembers.map((member, index) => \r\n            <div className=\"dcd-member\">\r\n                    <span>{member.name}</span>\r\n                    <button>Remove</button>\r\n            </div>\r\n            )}    \r\n        </div>\r\n        <div className=\"dcd-textbox\">\r\n            <textarea value={inputMsg} onChange={onInputMsgChange}></textarea>\r\n            <div className=\"dcd-icon-chat-tray\">\r\n                <img className=\"dcd-emoji-icon\" src={emojiIcon} onClick={displayEmojiPicker}></img>\r\n                <div id=\"dcd-emoji-picker\">\r\n                    <Picker onEmojiClick={onEmojiClick} />\r\n                </div>\r\n                <img className=\"dcd-attach-icon\" src={attachIcon}></img>\r\n            </div>\r\n            <img className=\"dcd-send-icon\" src={sendIcon} onClick={sendMessage.bind(this)}></img>\r\n        </div>\r\n        <div className=\"dcd-messages-display\" id=\"dcd-messages-display\" onScroll={getOlderMessages}>\r\n                {messages.map((x, i) => <div className=\"dcd-message\" id={\"dcd-message\"+i}>\r\n                    <h3>{x.author.name} <span>{timeConverter(x.ts)}</span>\r\n                    {(currentUserEmail == x.author.email) && <span className=\"dcd-edit-remove-options\">\r\n                        <button className=\"dcd-edit-msg-icon\" onClick={displayEditMessage.bind(this, i)}> </button>\r\n                        <button className=\"dcd-remove-msg-icon\" onClick={deleteMessage.bind(this, x.ts, i)}></button>\r\n                    </span>}\r\n                    </h3>\r\n                    <h4>{x.content}</h4>\r\n                    <div className=\"dcd-edit-msg-input\" id={\"dcd-edit-msg-input\"+i}>\r\n                        <input placeholder={x.content} onChange={onEditMsgChange}></input>\r\n                        <button onClick={editMessageRequest.bind(this, i, editedMsg)}>Edit Message</button>\r\n                    </div>\r\n                    <input hidden disabled value={hiddenInput}></input>\r\n                </div>)}\r\n        </div>\r\n        </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n        <div className=\"ch-default-display\">\r\n                <img src={ChatSVG} alt=\"Chat SVG\" className=\"ch-chat-svg\"></img>\r\n                <div className=\"ch-chat-instrns\">\r\n                    <span>Click on a channel or personal chat to begin a conversation.</span>\r\n                    <span>No channels created? Click <Link to=\"/chat/createChannel\">here</Link> to create one.</span>\r\n                </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DynamicChatDisplay;","F:\\projects\\zod-frontend\\zod\\src\\functions\\refreshToken.js",[],"F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\CreatePersonalBoard.js",["190","191","192"],"F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\CreatePublicBoard.js",["193","194","195"],"import './CreatePublicBoard.css';\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport React from 'react';\r\nimport refreshToken from '../../functions/refreshToken';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Button from 'react-bootstrap-button-loader'; \r\nimport firebase from 'firebase';\r\n\r\n \r\n/* \r\n    ClassName Convention Used:-\r\n        Eg: mp-top-nav -> MyProfile-top-nav ..\r\n*/\r\n\r\nexport default class CreatePublicBoard extends React.Component {\r\n\r\n    constructor() {\r\n     \r\n        super();\r\n        this.state = {\r\n            bname: '',\r\n            members: '',\r\n            finalMem: [{ email: \"\" }],\r\n            loading: false,\r\n            btnText: 'Create'\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        refreshToken();\r\n     \r\n        const token1 = localStorage.getItem('token');\r\n        const obj = JSON.parse(localStorage.getItem('pdata'))\r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': token1,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n    \r\n        let url = 'https://projectservice-zode.herokuapp.com/api/projects/' + obj.projectID + '/members';\r\n\r\n        axios.get(url, config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 200) {\r\n\r\n                const Data = res.data.projectMembers\r\n                this.setState({ members: Data });\r\n            } else {\r\n\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            if(error.response.status === 401) {\r\n                refreshToken();\r\n            };\r\n        });         \r\n    }\r\n\r\n    handleMemberInputChange = (e, index) => {\r\n\r\n        const { name, value } = e.target;\r\n        const list = this.state.finalMem;\r\n        list[index][name] = value;\r\n        \r\n        this.setState({\r\n            finalMem : list\r\n        }); \r\n    }; \r\n\r\n    handleAddBtn = () => {\r\n        \r\n        const obj = { email: \"\" }\r\n        \r\n        this.setState({\r\n            finalMem : [...this.state.finalMem, obj]\r\n        });         \r\n    }; \r\n\r\n    handleRemoveBtn = (index) => {\r\n\r\n        const list = this.state.finalMem;\r\n        list.splice(index, 1);\r\n\r\n        this.setState({\r\n            finalMem : list\r\n        });     \r\n    };\r\n\r\n    submitFn = () => {\r\n        this.setState({\r\n            loading: true,\r\n            btnText: 'Creating...'\r\n        })\r\n        const tokenx = localStorage.getItem('token');\r\n        const xobj = JSON.parse(localStorage.getItem('pdata')); \r\n\r\n        const config = {\r\n            headers: {\r\n                'Authorization': tokenx,\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin' : '*',\r\n            }\r\n        }\r\n    \r\n        const reqBody = {\r\n            \"boardName\": this.state.bname,\r\n            \"members\": this.state.finalMem,\r\n            \"type\": \"public\",\r\n            \"projectName\": xobj.projectName,\r\n            \"projectId\": xobj.projectID\r\n        }\r\n     \r\n        let url = 'https://boardservice-zode.herokuapp.com/api/board/new';\r\n        refreshToken();\r\n        axios.post(url, reqBody, config)\r\n        .then((res) => {\r\n    \r\n            if(res.status === 201) {\r\n                \r\n                console.log(JSON.stringify(res.data))\r\n                toast.info('Public Board Created!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        loading: false,\r\n                        btnText: 'Created!'\r\n                    })\r\n                    window.location.href = window.location.protocol + '//' + window.location.host + '/projectdashboard/board/bhome';\r\n                  }, 3000);\r\n                \r\n            } else {\r\n                this.setState({\r\n                    loading: false,\r\n                    btnText: 'Create'\r\n                })\r\n                toast.error('Some Error Occured!', {\r\n                    position: \"bottom-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });                \r\n            }\r\n        }) \r\n    }\r\n\r\n    updateBname = (evt) => {\r\n        this.setState({\r\n            bname: evt.target.value\r\n        });\r\n    } \r\n\r\n    backToBaseFn = () => {\r\n        //localStorage.setItem('pdata');\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/basedashboard/home';       \r\n    }\r\n\r\n    logout = () => {\r\n        window.location.href = window.location.protocol + '//' + window.location.host + '/login';   \r\n    }\r\n\r\n    getProfileImageURL() {\r\n        const user = firebase.auth().currentUser\r\n        if (user) {\r\n            return user.photoURL;\r\n        } else {\r\n            // Not Signed-in\r\n        } \r\n    }\r\n\r\n    render() {\r\n    \r\n        return (\r\n            <div className=\"CreatePublicBoard\">\r\n                \r\n                <div className=\"public-cb-top-nav\">\r\n\r\n                    <div className=\"pd-left-wrapper\">\r\n                        <div className=\"pd-lb\"><p className=\"pd-title\" onClick={ this.backToBaseFn }>zode</p></div>\r\n                    </div>\r\n    \r\n                    <div className=\"bd-right-wrapper\">\r\n    \r\n                        <div className=\"bd-profile-icon-wrapper\">\r\n\r\n                            <div>\r\n                                <img className=\"bd-icon\" src = { this.getProfileImageURL() }/>\r\n                            </div>\r\n\r\n                        <div className=\"bd-dropdown-content\">\r\n                            <Link to=\"/basedashboard/myprofile/profile\" style={{ textDecoration: 'none' }}><p>Profile</p></Link>\r\n                            <Link to=\"/basedashboard/myprofile/pendinginvites\" style={{ textDecoration: 'none' }}><p>Pending Invites</p></Link>\r\n                            <Link to=\"/login\" style={{ textDecoration: 'none' }}><p>Logout</p></Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n                </div>\r\n\r\n                <div className=\"public-cb-body-wrapper\">\r\n\r\n                    <div className=\"public-cb-left-nav\">\r\n                        \r\n                        <div className=\"public-cb-left-nav-grid\">\r\n                            \r\n                            <Link to=\"/projectdashboard/home\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"public-cb-lng1-wrapper\">\r\n                                    <div className=\"public-cb-lng1\" data-tip data-for=\"homeTip\"></div>\r\n                                </div>\r\n                            </Link> \r\n\r\n                            <Link to=\"/projectdashboard/board/bhome\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"public-cb-lng2\" data-tip data-for=\"boardTip\">\r\n                                </div>\r\n                            </Link>\r\n\r\n                            <Link to=\"/chat/home\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"public-cb-lng3\" data-tip data-for=\"chatTip\">\r\n                                </div>\r\n                            </Link>               \r\n\r\n                            <Link to=\"/projectdashboard/calender\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"public-cb-lng4\" data-tip data-for=\"calTip\"></div>\r\n                            </Link>\r\n\r\n                            <Link to=\"/meet/scheduleNew\" style={{ textDecoration: 'none' }}>\r\n                                <div className=\"public-cb-lng5\" data-tip data-for=\"videoCallTip\"></div>\r\n                            </Link>\r\n                            <div className=\"public-cb-lng6\" data-tip data-for=\"noneTip\"></div>\r\n                            <div className=\"public-cb-lng7\" data-tip data-for=\"noneTip\"></div>\r\n\r\n                            <ReactTooltip id=\"homeTip\" place=\"right\" effect=\"float\" type=\"dark\">Home</ReactTooltip> \r\n                            <ReactTooltip id=\"boardTip\" place=\"right\" effect=\"float\" type=\"dark\">Board</ReactTooltip>\r\n                            <ReactTooltip id=\"chatTip\" place=\"right\" effect=\"float\" type=\"dark\">Chat</ReactTooltip> \r\n                            <ReactTooltip id=\"calTip\" place=\"right\" effect=\"float\" type=\"dark\">Calender</ReactTooltip>\r\n                            <ReactTooltip id=\"videoCallTip\" place=\"right\" effect=\"float\" type=\"dark\">Meet/Video Call</ReactTooltip>\r\n                            <ReactTooltip id=\"noneTip\" place=\"right\" effect=\"float\" type=\"dark\">None</ReactTooltip>  \r\n\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"public-cb-body\">\r\n\r\n                        <div className=\"xcb-proname\">\r\n                            <p>Create Public Board</p>\r\n                        </div>\r\n\r\n                        <div className=\"xcb-proLine\"></div>\r\n\r\n                        <div className=\"xcb-gridWrx\">\r\n\r\n                            <div className=\"xcb-g1\">\r\n                                    \r\n                                <p className=\"xcb-g1-bname-label\">Board Name</p>\r\n                                <div><input type=\"text\" placeholder=\"Enter Board Name\" className=\"xcb-g1-bname-inp\" value = { this.state.bname } onChange={ this.updateBname } ></input></div>\r\n                                \r\n                                <p className=\"xcb-g1-members-hdn\">Add Members</p>\r\n                                    \r\n                                { this.state.finalMem.map((x, i) => {\r\n                        \r\n                                    return (\r\n                                        <div className=\"xcb-box\">\r\n                                            \r\n                                            <div className=\"xcb-one-row-wrapper\">\r\n        \r\n                                                <input list=\"email\" placeholder=\"Email\" className=\"xcb-email\" name=\"email\" onChange={e => this.handleMemberInputChange(e, i)}/>\r\n                                                \r\n                                                <datalist id=\"email\">\r\n                                                    \r\n                                                    { !this.state.members ? (\r\n                                                        <option value = \"Loading...\" />\r\n\r\n                                                    ):( this.state.members.map((memdata, j) => (\r\n                                                        <option value = { JSON.parse(JSON.stringify(memdata.email)) } />\r\n                                                    )))}\r\n\r\n                                                </datalist>\r\n            \r\n                                                <span className=\"xcb-btn-box\">\r\n                                                    { this.state.finalMem.length !== 1 && <button onClick={() => this.handleRemoveBtn(i) } className=\"xcb-remove-btn\">Remove</button>}\r\n                                                    { this.state.finalMem.length - 1 === i && <button onClick={ this.handleAddBtn } className=\"xcb-add-btn\">New</button>}\r\n                                                </span>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    );\r\n                                })} \r\n\r\n                                <Button variant=\"success\" loading={this.state.loading} className=\"xcb-g1-submit\" onClick={ this.submitFn }>{this.state.btnText}</Button>                                                                              \r\n                            </div>\r\n                            \r\n                            <div className=\"xcb-g2\">\r\n                                <div className=\"xcb-pic\"></div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","F:\\projects\\zod-frontend\\zod\\src\\components\\Loader\\Loader.js",[],"F:\\projects\\zod-frontend\\zod\\src\\components\\Board\\BMain.js",["196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"F:\\projects\\zod-frontend\\zod\\src\\components\\VideoCall\\ScheduleVC.js",["212","213","214","215","216","217"],"F:\\projects\\zod-frontend\\zod\\src\\components\\Loader\\CirclesLoader.js",[],"F:\\projects\\zod-frontend\\zod\\src\\components\\Calendar\\Cal.js",["218","219","220","221","222"],{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":17,"nodeType":"229","messageId":"230","endLine":1,"endColumn":26},{"ruleId":"231","severity":1,"message":"232","line":59,"column":33,"nodeType":"233","endLine":59,"endColumn":87},{"ruleId":"234","severity":1,"message":"235","line":10,"column":5,"nodeType":"236","endLine":10,"endColumn":20,"suggestions":"237"},{"ruleId":"234","severity":1,"message":"238","line":52,"column":5,"nodeType":"229","endLine":52,"endColumn":14,"suggestions":"239"},{"ruleId":"231","severity":1,"message":"232","line":86,"column":29,"nodeType":"233","endLine":86,"endColumn":72},{"ruleId":"227","severity":1,"message":"240","line":64,"column":13,"nodeType":"229","messageId":"230","endLine":64,"endColumn":22},{"ruleId":"231","severity":1,"message":"232","line":59,"column":33,"nodeType":"233","endLine":59,"endColumn":87},{"ruleId":"231","severity":1,"message":"232","line":94,"column":33,"nodeType":"233","endLine":94,"endColumn":95},{"ruleId":"231","severity":1,"message":"232","line":138,"column":33,"nodeType":"233","endLine":138,"endColumn":81},{"ruleId":"241","severity":1,"message":"242","line":25,"column":18,"nodeType":"243","messageId":"244","endLine":25,"endColumn":20},{"ruleId":"241","severity":1,"message":"245","line":39,"column":31,"nodeType":"243","messageId":"244","endLine":39,"endColumn":33},{"ruleId":"227","severity":1,"message":"246","line":2,"column":16,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"247","line":7,"column":10,"nodeType":"229","messageId":"230","endLine":7,"endColumn":24},{"ruleId":"227","severity":1,"message":"248","line":64,"column":29,"nodeType":"229","messageId":"230","endLine":64,"endColumn":34},{"ruleId":"241","severity":1,"message":"242","line":66,"column":35,"nodeType":"243","messageId":"244","endLine":66,"endColumn":37},{"ruleId":"231","severity":1,"message":"232","line":199,"column":33,"nodeType":"233","endLine":199,"endColumn":95},{"ruleId":"227","severity":1,"message":"246","line":1,"column":16,"nodeType":"229","messageId":"230","endLine":1,"endColumn":21},{"ruleId":"227","severity":1,"message":"249","line":23,"column":10,"nodeType":"229","messageId":"230","endLine":23,"endColumn":24},{"ruleId":"227","severity":1,"message":"250","line":23,"column":26,"nodeType":"229","messageId":"230","endLine":23,"endColumn":43},{"ruleId":"227","severity":1,"message":"251","line":25,"column":12,"nodeType":"229","messageId":"230","endLine":25,"endColumn":20},{"ruleId":"227","severity":1,"message":"252","line":25,"column":22,"nodeType":"229","messageId":"230","endLine":25,"endColumn":33},{"ruleId":"227","severity":1,"message":"253","line":26,"column":25,"nodeType":"229","messageId":"230","endLine":26,"endColumn":39},{"ruleId":"241","severity":1,"message":"242","line":50,"column":42,"nodeType":"243","messageId":"244","endLine":50,"endColumn":44},{"ruleId":"241","severity":1,"message":"245","line":66,"column":63,"nodeType":"243","messageId":"244","endLine":66,"endColumn":65},{"ruleId":"231","severity":1,"message":"232","line":104,"column":25,"nodeType":"233","endLine":104,"endColumn":84},{"ruleId":"241","severity":1,"message":"242","line":151,"column":34,"nodeType":"243","messageId":"244","endLine":151,"endColumn":36},{"ruleId":"241","severity":1,"message":"245","line":152,"column":34,"nodeType":"243","messageId":"244","endLine":152,"endColumn":36},{"ruleId":"227","severity":1,"message":"246","line":2,"column":16,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"231","severity":1,"message":"232","line":153,"column":33,"nodeType":"233","endLine":153,"endColumn":104},{"ruleId":"227","severity":1,"message":"254","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":14},{"ruleId":"227","severity":1,"message":"228","line":4,"column":17,"nodeType":"229","messageId":"230","endLine":4,"endColumn":26},{"ruleId":"231","severity":1,"message":"232","line":72,"column":25,"nodeType":"233","endLine":72,"endColumn":87},{"ruleId":"241","severity":1,"message":"242","line":114,"column":34,"nodeType":"243","messageId":"244","endLine":114,"endColumn":36},{"ruleId":"241","severity":1,"message":"242","line":180,"column":14,"nodeType":"243","messageId":"244","endLine":180,"endColumn":16},{"ruleId":"227","severity":1,"message":"254","line":4,"column":10,"nodeType":"229","messageId":"230","endLine":4,"endColumn":14},{"ruleId":"227","severity":1,"message":"247","line":5,"column":10,"nodeType":"229","messageId":"230","endLine":5,"endColumn":24},{"ruleId":"231","severity":1,"message":"232","line":179,"column":33,"nodeType":"233","endLine":179,"endColumn":86},{"ruleId":"227","severity":1,"message":"255","line":24,"column":5,"nodeType":"229","messageId":"230","endLine":24,"endColumn":19},{"ruleId":"227","severity":1,"message":"256","line":29,"column":12,"nodeType":"229","messageId":"230","endLine":29,"endColumn":23},{"ruleId":"227","severity":1,"message":"257","line":37,"column":9,"nodeType":"229","messageId":"230","endLine":37,"endColumn":19},{"ruleId":"241","severity":1,"message":"242","line":65,"column":25,"nodeType":"243","messageId":"244","endLine":65,"endColumn":27},{"ruleId":"241","severity":1,"message":"242","line":73,"column":27,"nodeType":"243","messageId":"244","endLine":73,"endColumn":29},{"ruleId":"241","severity":1,"message":"242","line":94,"column":25,"nodeType":"243","messageId":"244","endLine":94,"endColumn":27},{"ruleId":"241","severity":1,"message":"242","line":105,"column":43,"nodeType":"243","messageId":"244","endLine":105,"endColumn":45},{"ruleId":"241","severity":1,"message":"242","line":131,"column":25,"nodeType":"243","messageId":"244","endLine":131,"endColumn":27},{"ruleId":"241","severity":1,"message":"242","line":163,"column":32,"nodeType":"243","messageId":"244","endLine":163,"endColumn":34},{"ruleId":"241","severity":1,"message":"242","line":179,"column":47,"nodeType":"243","messageId":"244","endLine":179,"endColumn":49},{"ruleId":"241","severity":1,"message":"245","line":187,"column":33,"nodeType":"243","messageId":"244","endLine":187,"endColumn":35},{"ruleId":"241","severity":1,"message":"242","line":209,"column":32,"nodeType":"243","messageId":"244","endLine":209,"endColumn":34},{"ruleId":"234","severity":1,"message":"258","line":230,"column":23,"nodeType":"259","endLine":230,"endColumn":25},{"ruleId":"241","severity":1,"message":"245","line":249,"column":26,"nodeType":"243","messageId":"244","endLine":249,"endColumn":28},{"ruleId":"241","severity":1,"message":"242","line":257,"column":31,"nodeType":"243","messageId":"244","endLine":257,"endColumn":33},{"ruleId":"241","severity":1,"message":"242","line":260,"column":42,"nodeType":"243","messageId":"244","endLine":260,"endColumn":44},{"ruleId":"241","severity":1,"message":"242","line":276,"column":31,"nodeType":"243","messageId":"244","endLine":276,"endColumn":33},{"ruleId":"241","severity":1,"message":"242","line":279,"column":42,"nodeType":"243","messageId":"244","endLine":279,"endColumn":44},{"ruleId":"241","severity":1,"message":"242","line":292,"column":17,"nodeType":"243","messageId":"244","endLine":292,"endColumn":19},{"ruleId":"234","severity":1,"message":"260","line":301,"column":8,"nodeType":"259","endLine":301,"endColumn":10,"suggestions":"261"},{"ruleId":"241","severity":1,"message":"245","line":303,"column":26,"nodeType":"243","messageId":"244","endLine":303,"endColumn":28},{"ruleId":"241","severity":1,"message":"242","line":344,"column":36,"nodeType":"243","messageId":"244","endLine":344,"endColumn":38},{"ruleId":"231","severity":1,"message":"232","line":355,"column":17,"nodeType":"233","endLine":355,"endColumn":94},{"ruleId":"231","severity":1,"message":"232","line":359,"column":17,"nodeType":"233","endLine":359,"endColumn":67},{"ruleId":"231","severity":1,"message":"232","line":361,"column":13,"nodeType":"233","endLine":361,"endColumn":92},{"ruleId":"241","severity":1,"message":"242","line":366,"column":40,"nodeType":"243","messageId":"244","endLine":366,"endColumn":42},{"ruleId":"227","severity":1,"message":"246","line":2,"column":16,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"247","line":7,"column":10,"nodeType":"229","messageId":"230","endLine":7,"endColumn":24},{"ruleId":"231","severity":1,"message":"232","line":141,"column":33,"nodeType":"233","endLine":141,"endColumn":95},{"ruleId":"227","severity":1,"message":"246","line":2,"column":16,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"247","line":7,"column":10,"nodeType":"229","messageId":"230","endLine":7,"endColumn":24},{"ruleId":"231","severity":1,"message":"232","line":208,"column":33,"nodeType":"233","endLine":208,"endColumn":95},{"ruleId":"227","severity":1,"message":"246","line":2,"column":16,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"262","line":7,"column":10,"nodeType":"229","messageId":"230","endLine":7,"endColumn":25},{"ruleId":"227","severity":1,"message":"263","line":7,"column":27,"nodeType":"229","messageId":"230","endLine":7,"endColumn":36},{"ruleId":"227","severity":1,"message":"264","line":7,"column":38,"nodeType":"229","messageId":"230","endLine":7,"endColumn":47},{"ruleId":"227","severity":1,"message":"247","line":8,"column":10,"nodeType":"229","messageId":"230","endLine":8,"endColumn":24},{"ruleId":"241","severity":1,"message":"242","line":107,"column":39,"nodeType":"243","messageId":"244","endLine":107,"endColumn":41},{"ruleId":"241","severity":1,"message":"242","line":126,"column":35,"nodeType":"243","messageId":"244","endLine":126,"endColumn":37},{"ruleId":"241","severity":1,"message":"242","line":144,"column":35,"nodeType":"243","messageId":"244","endLine":144,"endColumn":37},{"ruleId":"241","severity":1,"message":"242","line":148,"column":52,"nodeType":"243","messageId":"244","endLine":148,"endColumn":54},{"ruleId":"241","severity":1,"message":"242","line":193,"column":42,"nodeType":"243","messageId":"244","endLine":193,"endColumn":44},{"ruleId":"241","severity":1,"message":"242","line":231,"column":38,"nodeType":"243","messageId":"244","endLine":231,"endColumn":40},{"ruleId":"241","severity":1,"message":"242","line":448,"column":38,"nodeType":"243","messageId":"244","endLine":448,"endColumn":40},{"ruleId":"241","severity":1,"message":"242","line":469,"column":27,"nodeType":"243","messageId":"244","endLine":469,"endColumn":29},{"ruleId":"241","severity":1,"message":"242","line":543,"column":27,"nodeType":"243","messageId":"244","endLine":543,"endColumn":29},{"ruleId":"231","severity":1,"message":"232","line":754,"column":33,"nodeType":"233","endLine":754,"endColumn":95},{"ruleId":"231","severity":1,"message":"232","line":870,"column":53,"nodeType":"233","endLine":870,"endColumn":112},{"ruleId":"241","severity":1,"message":"242","line":26,"column":18,"nodeType":"243","messageId":"244","endLine":26,"endColumn":20},{"ruleId":"241","severity":1,"message":"245","line":51,"column":31,"nodeType":"243","messageId":"244","endLine":51,"endColumn":33},{"ruleId":"241","severity":1,"message":"242","line":80,"column":20,"nodeType":"243","messageId":"244","endLine":80,"endColumn":22},{"ruleId":"234","severity":1,"message":"265","line":97,"column":8,"nodeType":"259","endLine":97,"endColumn":17,"suggestions":"266"},{"ruleId":"231","severity":1,"message":"232","line":109,"column":25,"nodeType":"233","endLine":109,"endColumn":82},{"ruleId":"231","severity":1,"message":"232","line":152,"column":9,"nodeType":"233","endLine":152,"endColumn":63},{"ruleId":"227","severity":1,"message":"267","line":2,"column":17,"nodeType":"229","messageId":"230","endLine":2,"endColumn":25},{"ruleId":"227","severity":1,"message":"268","line":13,"column":8,"nodeType":"229","messageId":"230","endLine":13,"endColumn":13},{"ruleId":"227","severity":1,"message":"269","line":15,"column":8,"nodeType":"229","messageId":"230","endLine":15,"endColumn":20},{"ruleId":"227","severity":1,"message":"270","line":35,"column":11,"nodeType":"229","messageId":"230","endLine":35,"endColumn":17},{"ruleId":"231","severity":1,"message":"232","line":67,"column":33,"nodeType":"233","endLine":67,"endColumn":90},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDisabled'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [seconds] as a second argument to the useEffect Hook.","MemberExpression",["273"],"React Hook useEffect contains a call to 'setAvatar'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["274"],"'errorCode' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Route' is defined but never used.","'ToastContainer' is defined but never used.","'index' is assigned a value but never used.","'channelMembers' is assigned a value but never used.","'setChannelMembers' is assigned a value but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'setAllMessages' is assigned a value but never used.","'Link' is defined but never used.","'channelChanged' is assigned a value but never used.","'chosenEmoji' is assigned a value but never used.","'prevMsgRef' is assigned a value but never used.","Assignments to the 'channelMsgs' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.",["275"],"'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'Draggable' is defined but never used.","React Hook useEffect has a missing dependency: 'allmembers'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMembers' needs the current value of 'allmembers'.",["276"],"'useState' is defined but never used.","'axios' is defined but never used.","'refreshToken' is defined but never used.","'logout' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},"Add dependencies array: [seconds]",{"range":"285","text":"286"},"Add dependencies array: []",{"range":"287","text":"288"},"Update the dependencies array to be: [currentUser]",{"range":"289","text":"290"},"Update the dependencies array to be: [allmembers, checked]",{"range":"291","text":"292"},[761,761],", [seconds]",[2059,2059],", []",[11311,11313],"[currentUser]",[3054,3063],"[allmembers, checked]"]